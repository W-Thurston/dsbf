# dsbf/eda/task_result.py

from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Dict, List, Optional


@dataclass
class TaskResult:
    """
    Standardized result object returned by all EDA or diagnostic tasks.

    Attributes:
        name (str): A unique identifier for the task (e.g. 'null_summary').
        status (str): Execution status (e.g. 'success', 'skipped', 'failed').
        summary (Union[str, Dict[str, Any]]): A human-readable message or short summary
            of results.
        data (Optional[Dict[str, Any]]): Core output from the task, e.g., stats, flags,
            computed values.
        plots (Optional[List[Path]]): Paths to any plot image files generated by the
            task.
        metadata (Dict[str, Any]): Optional extra metadata (timing, config, version
            info, etc.).
    """

    name: str
    status: str
    summary: Dict[str, Any]
    data: Optional[Dict[str, Any]] = None
    plots: Optional[List[Path]] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    recommendations: Optional[List[str]] = None

    def to_dict(self) -> Dict[str, Any]:
        """
        Convert the TaskResult to a dictionary representation,
        making it serializable and suitable for JSON export.

        Returns:
            Dict[str, Any]: A dictionary version of the result object.
        """
        return {
            "name": self.name,
            "status": self.status,
            "summary": self.summary,
            "data": self.data,
            "plots": [str(p) for p in self.plots] if self.plots else None,
            "metadata": self.metadata,
            "recommendations": self.recommendations,
        }

    def __str__(self) -> str:
        """
        String representation of the task result for quick logging.

        Returns:
            str: Short status message.
        """
        return (
            f"TaskResult(name={self.name}, status={self.status}, "
            f"summary={self.summary})"
        )
